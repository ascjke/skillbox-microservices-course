plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.github.ben-manes.versions' version '0.47.0'
}

group = 'ru.borisov'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

configurations {
	all*.exclude module : 'spring-boot-starter-logging'
	all*.exclude module : 'logback-classic'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation group: 'com.lmax', name: 'disruptor', version: '3.4.4'
	implementation 'org.hibernate.orm:hibernate-jcache'
	implementation 'org.ehcache:ehcache:3.10.8:jakarta'
	implementation group: 'net.lbruun.springboot', name: 'preliquibase-spring-boot-starter', version: '1.4.0'
	implementation 'org.liquibase:liquibase-core'
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.18.3'
	testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.18.3'
	testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.18.3'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named("dependencyUpdates").configure {
	rejectVersionIf {
		isNonStable(it.candidate.version)
	}
}

def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}
